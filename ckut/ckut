#!/bin/bash
#
#    ckut - a simple shell script for updating the linux kernel
#
#    Copyright (c) 2020 by Lin SiFuh
#
#    *************************************************************************
#    *                                                                       *
#    * This program is free software; you can redistribute it and/or modify  *
#    * it under the terms of the GNU General Public License as published by  *
#    * the Free Software Foundation; either version 2 of the License, or     *
#    * (at your option) any later version.                                   *
#    *                                                                       *
#    *************************************************************************
#
#   **** USE AT YOUR OWN RISK ****
#

# Pkgfile needs dialog, pv and lynx (curl)
# can change to wget --no-check-certificate -O "${TMPDIR}/index.html"
# for in $(cat "${TMPDIR}/index.html" .....


VERSION="v0.7"
TITLE="CRUX Kernel Update Tool ${VERSION}    ${MESSAGE}"
CONFIG="/etc/ckut.conf"
TMPDIR="$(mktemp -d /tmp/ckut.XXXXXXXXXX)"
TMPFILE="$(mktemp -p "${TMPDIR}")"
KERNEL_OLD="$(uname -r)"
KERNEL="NONE"

check_root(){

  if [ "root" != "$USER" ]; then
    dialog --backtitle "${TITLE}" --ok-label "Nope" --msgbox "Got root?" 5 13
    exit 0
  fi

}

trap 'rm -rf "${TMPDIR}" && clear' EXIT
touch "${TMPDIR}/ckut.log"

for list in $(curl -s https://www.kernel.org | grep -Po 'href="\K.*?z(?=")' | \
  grep -v patch |sort -ur); do v=${list##*\x-} ; v=${v%%.tar*} ; \
  echo -n "$v $(printf ' %.0s' {0..10})" | head -c 10 ; echo " ${list}" ; done > "${TMPDIR}/ckut.list"

. ${CONFIG}
eval MAKEFLAGS="($MAKEFLAGS)"

main() {

  while true ; do
    dialog --backtitle "${TITLE}" --title "${KERNEL_OLD}" --cancel-label "Exit" \
      --menu "\nKernel version selected is [${KERNEL}]" 0 0 0 \
      w "https://www.kernel.org" \
      v "Version [${KERNEL}]"\
      d "Download" \
      e "Extract" \
      p "Prepare" \
      m "Menuconfig" \
      c "Compile" \
      i "Install" \
      s "Syslinux" \
      o "Input" \
      l "Command Log" \
      q "Exit" 2> "${TMPFILE}"
  
    [[ $? != 0 ]] && exit 0

    RESULT=$(< "${TMPFILE}")
    case ${RESULT} in
      w) lynx_kernel;;
      v) select_kernel;;
      d) download_kernel;;
      e) extract_kernel;;
      p) prepare_kernel;;
      m) menuconfig_kernel;;
      c) compile_kernel;;
      i) install_kernel;;
      s) configure_syslinux;;
      o) manual_kernel;;
      l) log_kernel;;
      q) exit 0;;
    esac
  done
exit 0

}

lynx_kernel() {

  export LYNX_SAVE_SPACE="${DOWNLOAD_LOCATION}"
  lynx "https://www.kernel.org/"
  unset LYNX_SAVE_SPACE

}

select_kernel() {

  while true; do
    dialog --backtitle "${TITLE}" --title "${KERNEL_OLD}" --menu '\nSelect a kernel version' 0 0 0 \
      $(awk '{print $1 }' "${TMPDIR}"/ckut.list | nl) 2>"${TMPFILE}" && break 
    [[ $? != 0 ]] && return 
  done
  RESULT=$(< "${TMPFILE}")
  KERNEL="$(sed -n "${RESULT}p" "${TMPDIR}/ckut.list"| awk '{print $1 }')"

}

download_kernel() {


  if [ -z "${MANUAL}" ]; then
    URL=$(awk '/'"${KERNEL}"'/ { print $2 }' < "${TMPDIR}/ckut.list")
  else
    URL="https://cdn.kernel.org/pub/linux/kernel/v${KERNEL:0:1}.x/linux-${KERNEL}.tar.xz"
  fi

  if [ -z "${URL}" ]; then
    MESSAGE="Select a kernel first"
    SIZE=(5 26)
    error_kernel
  else
    cd "${DOWNLOAD_LOCATION}" || return
    wget -c --progress=dot "${URL}" 2>&1 | \
      grep "%" | sed -u -e "s,\.,,g" | awk '{print $2}' | \
      sed -u -e "s,\%,,g" | dialog --backtitle "${TITLE}" --title \
      "Downloading linux-${KERNEL} to ${DOWNLOAD_LOCATION}"  --gauge "Linux ${KERNEL}" 10 100 
    echo "wget -c ${URL}" >> "${TMPDIR}/ckut.log"
  fi

}

extract_kernel() {

    check_kernel && check_archive
    cd /usr/src/ || return
    (pv -n "${DOWNLOAD_LOCATION}/linux-${KERNEL}.tar.xz" | tar -J -xf -)2>&1 | \
      dialog --backtitle "${TITLE}" --title "Extracting linux-${KERNEL} to ${DOWNLOAD_LOCATION}" \
      --gauge "Please wait..." 10 70 0
    echo "tar -xf ${DOWNLOAD_LOCATION}/linux-${KERNEL}.tar.xz" >> "${TMPDIR}/ckut.log"

}

prepare_kernel() {

  check_kernel && check_folder
  cd "/usr/src/linux-${KERNEL}" || return
  clear
  make "${MAKEFLAGS[@]}" mrproper
  if [ -f "${KERNEL_LOCATION}/config-${KERNEL_OLD}" ]; then
    cp "${KERNEL_LOCATION}/config-${KERNEL_OLD}" .config
    echo -e "make ${MAKEFLAGS[*]} mrproper \ncp ""${KERNEL_LOCATION}"/config-"${KERNEL_OLD}"" .config" >> "${TMPDIR}/ckut.log"
    else
      echo "make ${MAKEFLAGS[*]} mrproper" >> "${TMPDIR}/ckut.log"
      MESSAGE="Could not find a config file for ${KERNEL_OLD}. Either find it and copy it to /usr/src/linux-${KERNEL}/.config or run menuconfig to create and configure a new .config\n\nContinuing without it"
      SIZE=(11 60)
      error_kernel
  fi

}

menuconfig_kernel() {

   check_kernel && check_folder
   cd "/usr/src/linux-${KERNEL}" || return
   clear
   make "${MAKEFLAGS[@]}" menuconfig
   echo "make ${MAKEFLAGS[*]} menuconfig" >> "${TMPDIR}/ckut.log"

}

compile_kernel() {

    check_kernel && check_folder
    cd "/usr/src/linux-${KERNEL}" || return
    clear
    make "${MAKEFLAGS[@]}" all && \
    make "${MAKEFLAGS[@]}" modules_install
    echo -e "make ${MAKEFLAGS[*]} all \nmake ${MAKEFLAGS[*]} modules_install" >> "${TMPDIR}/ckut.log"
    read -n 1 -r -s -p $'Press enter to continue...'

}

install_kernel() {

  check_kernel && check_folder
  cd "/usr/src/linux-${KERNEL}" || return
  dialog --prgbox "cp -v arch/x86/boot/bzImage \"${KERNEL_LOCATION}/vmlinuz-${KERNEL}${LOCALVERSION}\" ; \
    cp -v System.map \"${KERNEL_LOCATION}/System.map-${KERNEL}${LOCALVERSION}\" ; \
    cp -v .config \"${KERNEL_LOCATION}/config-${KERNEL}${LOCALVERSION}\"" 10 90
    echo -e "cp bzImage ${KERNEL_LOCATION}/vmlinuz-${KERNEL}${LOCALVERSION} \ncp System.map ${KERNEL_LOCATION}/System.map-${KERNEL}${LOCALVERSION} \ncp .config ${KERNEL_LOCATION}/config-${KERNEL}${LOCALVERSION}" >> "${TMPDIR}/ckut.log"

}

configure_syslinux() {

  if [ -f /boot/syslinux/syslinux.cfg ]; then
    vi /boot/syslinux/syslinux.cfg
    echo "vi /boot/syslinux/syslinux.cfg" >> "${TMPDIR}/ckut.log"
  fi

}

manual_kernel() {

  KERNEL=$(dialog --stdout --backtitle "${TITLE}" --title "${KERNEL_OLD}" --inputbox "\nEnter a kernel version" 0 0)
  if [ -z "${KERNEL}" ]; then
    KERNEL="NONE"
    unset MANUAL
  else
    MANUAL="1"
  fi

}

check_archive() {

  if [ ! -f "/usr/src/linux-${KERNEL}.tar.xz" ]; then
    MESSAGE="Cannot find ${DOWNLOAD_LOCATION}/linux-${KERNEL}.tar.xz"
    SIZE=(5 50)
    error_kernel && main
  fi

}

check_folder() {

  if [ ! -d "/usr/src/linux-${KERNEL}" ]; then
    MESSAGE="Directory ${DOWNLOAD_LOCATION}/linux-${KERNEL} does not exist"
    SIZE=(5 60)
    error_kernel && main
  fi

}

check_kernel() {

  if [ "${KERNEL}" == "NONE" ]; then
    MESSAGE="Select a kernel first"
    SIZE=(5 26)
    error_kernel && main
  fi

}

log_kernel() {

  dialog --no-shadow --backtitle "${TITLE}" --title "Command Log" --scrolltext --textbox "${TMPDIR}/ckut.log" 18 78
}

error_kernel() {

  dialog --backtitle "${TITLE}" --title "Error!" --msgbox "${MESSAGE}" "${SIZE[0]}" "${SIZE[1]}"

}

check_root && main
