#!/bin/bash
#
#    ckut - a simple shell script for updating the linux kernel
#
#    Copyright (c) 2020 by Lin SiFuh
#
#    *************************************************************************
#    *                                                                       *
#    * This program is free software; you can redistribute it and/or modify  *
#    * it under the terms of the GNU General Public License as published by  *
#    * the Free Software Foundation; either version 2 of the License, or     *
#    * (at your option) any later version.                                   *
#    *                                                                       *
#    *************************************************************************
#
#   **** USE AT YOUR OWN RISK ****
#

VERSION="v0.6"
TITLE="CRUX Kernel Update Tool ${VERSION}"
CONFIG="/etc/ckut.conf"
TMP="/tmp"
TMPFILE=$(mktemp)
KERNEL_OLD=$(uname -r)
KERNEL="NOT SELECTED"

for list in $(curl -s https://www.kernel.org | grep -Po 'href="\K.*?z(?=")' | \
  grep -v patch |sort -ur); do v=${list##*\x-} ; v=${v%%.tar*} ; \
  echo -n "$v $(printf ' %.0s' {0..10})" | head -c 10 ; echo " ${list}" ; done > ${TMP}/tmp.list

. ${CONFIG}

main() {

  while true 
  do
    dialog --backtitle "${TITLE}" --title "${KERNEL_OLD}" --cancel-label "Exit" \
      --menu "Build options for kernel [${KERNEL}]" 18 45 3 \
      1 "https://www.kernel.org" \
      2 "Version [${KERNEL}]"\
      3 "Download" \
      4 "Extract" \
      5 "Prepare" \
      6 "Menuconfig" \
      7 "Compile" \
      8 "Install" \
      9 "Syslinux" \
      q "Exit" 2> "${TMPFILE}"
          
    [[ $? != 0 ]] && exit_kernel

    RESULT=$(< ${TMPFILE})
    
    case ${RESULT} in
      1) lynx_kernel;;
      2) select_kernel;;
      3) download_kernel;;
      4) extract_kernel;;
      5) prepare_kernel;;
      6) menuconfig_kernel;;
      7) compile_kernel;;
      8) install_kernel;;
      9) configure_syslinux;;
      q) exit_kernel;;
    esac
  done

#rm $TMPFILE

}

lynx_kernel() {

  export LYNX_SAVE_SPACE="${DOWNLOAD_LOCATION}"
  lynx "https://www.kernel.org/"
  unset LYNX_SAVE_SPACE
  main

}

select_kernel() {
  
  while true; do
    dialog --backtitle "${TITLE}" --menu 'Please select a kernel from the list' 18 70 15 \
      $(awk '{print $1 '} "${TMP}/tmp.list" | nl) 2>"${TMPFILE}" && break
    if [ $? != 0 ]; then
      main
    else
      :
    fi
  done
        
   RESULT=$(< "${TMPFILE}")
   KERNEL="$(sed -n "${RESULT}p" "${TMP}/tmp.list"| awk '{print $1 }')"
   main

}

download_kernel() {

  URL=$(awk '/'${KERNEL}'/ { print $2 }' < "${TMP}/tmp.list")
  if [ -z "${URL}" ]; then
    main
  else
  cd "${DOWNLOAD_LOCATION}" || return
  wget -c --progress=dot "${URL}" 2>&1 | \
    grep "%" | sed -u -e "s,\.,,g" | awk '{print $2}' | \
    sed -u -e "s,\%,,g" | dialog --backtitle "${TITLE}" --title \
    "Downloading linux-${KERNEL} to ${DOWNLOAD_LOCATION}"  --gauge "Linux ${KERNEL}" 10 100 
  fi

}

extract_kernel() {

  if [ -f "${DOWNLOAD_LOCATION}/linux-${KERNEL}.tar.xz" ]; then
    cd /usr/src/ || return
    (pv -n "${DOWNLOAD_LOCATION}/linux-${KERNEL}.tar.xz" | tar -J -xf -)2>&1 | \
      dialog --backtitle "${TITLE}" --title "Extracting linux-${KERNEL} to ${DOWNLOAD_LOCATION}" \
      --gauge "Please wait..." 10 70 0
  else
    main
  fi

}

prepare_kernel() {

  if [ -d "${DOWNLOAD_LOCATION}/linux-${KERNEL}" ]; then
    cd "/usr/src/linux-${KERNEL}" || return
    clear
    make ${MAKEFLAGS} mrproper
    if [ -f "${KERNEL_LOCATION}/config-${KERNEL_OLD}" ]; then
      cp "${KERNEL_LOCATION}/config-${KERNEL_OLD}" .config
    else
      main
    fi
  fi

}

menuconfig_kernel() {

  if [ -d "${DOWNLOAD_LOCATION}/linux-${KERNEL}" ]; then
    cd "/usr/src/linux-${KERNEL}" || return
    clear
    make ${MAKEFLAGS} menuconfig
  else
    main
  fi

}

compile_kernel() {

  if [ -d "${DOWNLOAD_LOCATION}/linux-${KERNEL}" ]; then
    cd "/usr/src/linux-${KERNEL}" || return
    clear
    make ${MAKEFLAGS} all && \
    make ${MAKEFLAGS} modules_install
    read -n 1 -r -s -p $'Press enter to continue...'
  else
    main
  fi

}

install_kernel() {

  if [ -d "${DOWNLOAD_LOCATION}/linux-${KERNEL}" ]; then
    cd "/usr/src/linux-${KERNEL}" || return
    dialog --backtitle "${TITLE}" --title "Copied files ..." --msgbox "$(echo -e "\nCopying files from $(pwd)\n" && \
      cp -v arch/x86/boot/bzImage "${KERNEL_LOCATION}/vmlinuz-${KERNEL}${LOCALVERSION}" 2>"${TMP}/copy.log" || \
      cat "${TMP}/copy.log" && \
      cp -v System.map "${KERNEL_LOCATION}/System.map-${KERNEL}${LOCALVERSION}" 2>"${TMP}/copy.log" || \
      cat "${TMP}/copy.log" && \
      cp -v .config "${KERNEL_LOCATION}/config-${KERNEL}${LOCALVERSION}" 2>"${TMP}/copy.log" || \ 
      cat "${TMP}/copy.log")" 13 100
      rm "${TMP}/copy.log"
  else
    main
  fi

}

configure_syslinux() {

  if [ -f /boot/syslinux/syslinux.cfg ]; then
    vim /boot/syslinux/syslinux.cfg
  else
    main
  fi

}

exit_kernel() {

  trap "rm -f ${TMPFILE} ${TMP}/tmp.list" 0 1 2 5 15
  clear
  exit 0

}

main
